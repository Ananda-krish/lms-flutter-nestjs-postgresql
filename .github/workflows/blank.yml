name: Flutter & NestJS CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ------ FLUTTER CI/CD ------
  flutter:
    name: Build & Test Flutter App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.16.0"

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

      - name: Build APK
        run: flutter build apk --release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  # ------ NESTJS CI/CD ------
  backend:
    name: Build & Deploy NestJS
    runs-on: ubuntu-latest
    needs: flutter

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install
        working-directory: backend

      - name: Lint
        run: npm run lint
        working-directory: backend

      - name: Run tests
        run: npm run test
        working-directory: backend

      - name: Build
        run: npm run build
        working-directory: backend

  # ------ DEPLOYMENT ------
  deploy:
    name: Deploy Backend & Flutter
    runs-on: ubuntu-latest
    needs: backend
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/backend
            git pull origin main
            npm install
            npm run build
            pm2 restart all
            cd /path/to/flutter
            git pull origin main
            flutter build apk --release
